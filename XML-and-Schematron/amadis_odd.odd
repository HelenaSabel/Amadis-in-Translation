<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="schemas/odd4odds.rnc" type="application/relax-ng-compact-syntax"?>
<?xml-model href="schemas/odd4odds.isosch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xml:lang="en" >
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>ODD for Amadis in Translation</title>
        <author><persName>Elisa E. Beshero-Bondar</persName></author>
      </titleStmt>
      <publicationStmt>
	<publisher>newtfire.org</publisher>
        <availability>
          <p>Available to anyone to share and adapt according to the terms of Creative Commons Non-Commercial ShareAlike 4.0 International License.</p>
        </availability>
      </publicationStmt>
      <sourceDesc>
        <p>Created at the 2016 DHSI class on ODDs taught by Syd Bauman and James Cummings.</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change who="#ebb" when="2016-06-14">initiated this ODD</change>  
    </revisionDesc>
  </teiHeader>
  <text>
      <!-- 
           This template is intended to give you a quick starting point for
           writing ODD files. You may find it useful to copy and paste 
           specific constructs from odd_extended_template.xml, which contains
           commented templates for specific ODD-writing tasks.
      -->
    <body>
      <p><!--One or more paragraphs describing the customization.-->This ODD file is designed to contrain a project that studies the translation of a text in early modern Spanish, Montalvo's Amadis de Gaula, into other languages, beginning with Robert Southey's translation into English in the early nineteenth century.</p>

      <!-- The <schemaSpec> element is in effect the root element for
           the schema specification portion of the ODD. 
              - @ident is required; it is allowed to be any name.
	      - @source establishes the base version oF TEI to build with
              - @start says what element(s) are allowed as the root element
                  of documents conforming to this schema.  -->
      <schemaSpec ident="AmadisODD" source="tei:current" start="TEI">

        <!-- 
             The <moduleRef> elements specify which TEI modules will
             be included in the schema. The value of the @key
             attribute is the name of the module. The first four listed here 
             are required: core, tei, header, textstructure. 
        
             To trim the contents of these modules, use @include OR @except:
               - @include lists the elements from the module that will be included in the schema
               - @except lists the elements from the module that will be excluded from the schema        
        -->
        <moduleRef key="core" except="addrLine address binaryObject cb divGen postBox postCode sp speaker stage street teiCorpus"/>
          <!--2016-06-15: attributes in use on milestone are:
          @unit='p', 'said'
          @ana='start','end','intStart','intEnd'
          @resp
          @type='unclear' with @cert='low', 'medium', 'unknown'
          -->
        
        <moduleRef key="tei"/>
        <moduleRef key="header"/>
        <moduleRef key="textstructure" except="div1 div2 div3 div4 div5 div6 div7"/>
        <moduleRef key="analysis" include="cl s"/>
        <moduleRef key="gaiji" include="charDecl char mapping glyph"/>
        <moduleRef key="transcr" include="facsimile"></moduleRef>
        <moduleRef key="linking" include="anchor seg"/>
        <moduleRef key="namesdates" include="listPerson person persName forename surname roleName listPlace place placeName geo"/>
        <moduleRef key="iso-fs"/>
        <moduleRef key="figures" include="figure"/>
        <moduleRef key="msdescription" include="locus"/>
        
        <elementSpec module="core" ident="milestone" mode="change">
          <classes mode="change">
            <memberOf key="att.global" mode="delete"/>
            <memberOf key="att.global.analytic" mode="add"/>
            <memberOf key="att.global.responsibility" mode="add"/>
            <memberOf key="att.global.rendition" mode="delete"/>
            <memberOf key="att.edition" mode="delete"/>
            <memberOf key="att.typed" mode="delete"/>
          </classes>
          <constraintSpec ident="milestone-distinct-anas" scheme="isoschematron">
            <constraint>
             <sch:rule context=".[@unit='said']">
               <sch:report test="not(@ana)">
                 Every milestone related to speech (marked with @unit='said') must have an @ana attribute to mark whether this is a start, end, or interruption marker for a spoken passage. 
               </sch:report>
             </sch:rule>
            <!--  <sch:rule context="tei:milestone[@unit eq 'said'][@ana][preceding::tei:milestone[@unit eq 'said'][@ana]]/@ana">-->
                <sch:report test="@ana = preceding::tei:milestone[@unit eq 'said'][@ana][1]/@ana">
                 For speeches: the @ana must NOT be the same on two subsequent milestones!
                </sch:report>   
              <!--</sch:rule>-->
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="unit" mode="replace">
              <datatype>
                <dataRef key="teidata.word"/>
              </datatype>
              <valList type="closed">
                <valItem ident="p"/>
                <valItem ident="said"/>
              </valList>
            </attDef> 
          </attList>
        </elementSpec>
        
        
        <constraintSpec ident="checking-ref-resp-atts" scheme="isoschematron">
          <constraint>  
       <!-- <sch:let name="si" value="doc('SI-Amadis.xml')//@xml:id"/>
        <sch:let name="siFile" value="doc('SI-Amadis.xml')"/>
        
        <sch:let name="M_files" value="collection('./Montalvo')[contains(tokenize(./base-uri(), '/')[last()], 'Mont')]"/>
        <sch:let name="M_ids" value="$M_files//@xml:id"/>
        
        <sch:let name="S_files" value="collection('./Southey')[contains(tokenize(./base-uri(), '/')[last()], 'South')]"/>
        <sch:let name="S_ids" value="$S_files//@xml:id"/>-->
        
        
        <sch:pattern>
          <sch:rule context="@ref | @resp">
            <sch:let name="si" value="doc('SI-Amadis.xml')//@xml:id"/>
            <sch:let name="siFile" value="doc('SI-Amadis.xml')"/>
            <sch:let name="tokens" value="for $i in tokenize(., '\s+') return substring-after($i,'#')"/>
            <sch:assert test="every $token in $tokens satisfies $token = $si">The attribute (after the hashtag, #) must match a defined @xml:id in the Site Index file!</sch:assert>
          </sch:rule>
        </sch:pattern></constraint></constraintSpec>
        
        
        
        <!--ebb: The following is a model copied from Syd's slide to show me how to tuck Schematron into ODD-->
       <!-- <elementSpec module="core" ident="anchor" mode="change">
          <constraintSpec ident="subtype-matched-type" scheme="isoschematron">
            <constraint>
              <sch:report test="@type = 'person'  and  not( @subtype = ('officer','enlisted') )">
                a name of a person should be sub-catagorized as an officer's name or an enlisted
                man's name
              </sch:report>
              <sch:report test="@type = 'ship'  and  not( @subtype = ('merchant','naval')">
                the name of a ship should be sub-catagorized as that of a merchant or naval ship
              </sch:report>
            </constraint>
          </constraintSpec>
          <attList>
            <attDef ident="type" mode="change" usage="req">
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.enumerated"/>
              </datatype>
              <valList type="closed">
                <valItem ident="person"/>
                <valItem ident="place"/>
                <valItem ident="port"/>
                <valItem ident="ship"/>
              </valList>
            </attDef>
            <attDef ident="subtype" mode="change">
              <datatype minOccurs="1" maxOccurs="1">
                <dataRef key="teidata.enumerated"/>
              </datatype>
              <valList type="closed">
                <valItem ident="officer"/>
                <valItem ident="enlisted"/>
                <valItem ident="merchant"/>
                <valItem ident="naval"/>
              </valList>
            </attDef>
          </attList>
        </elementSpec>-->
      </schemaSpec>
    </body>
  </text>
</TEI>
